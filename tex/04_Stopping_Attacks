\section{攻撃の停止}

Proof of Stakeシステムに対してよく知られた2つの攻撃があります。Long Range RevisionsとCastastrophic Crashesです。私たちはそれぞれを順番に話し合いました。

\subsection{Long Range Revisions}

withdrawal delay後のバリデーターは、バリデータークライアントとの間に同期生の仮定を導入します。

バリデーターの連合がデポジットを取り下げた場合、その連合が過去にデポジットの2/3以上を持っていた場合、歴史的な大多数を使って矛盾するチェックポイントを確定することができます。(彼らは既に彼らのお金を回収しているからです。)

これは、Long Range Revisions攻撃と呼ばれます。図5を参照してください。


簡単に言えば、finalizeされたブロックを元に戻さないフォーク選択ルールによって。

ロングレンジ攻撃が防止され、各クライアントが「ログオン」し、ある一定の頻度(例えば、1~2ヶ月に1回)でチェーンの完全な最新のレビューを得られることを期待します。

それより古いブロックをfinalizeする「ロングレンジリビジョン」フォークは単に無視されますが、全てのクライアントが既にその高さでfinalizeされたブロックを見ていて、元に戻すことを拒否するため、無視されます。

これは、ロングレンジリビジョン攻撃と呼ばれます。図5を参照してください。


メカニズムの非公式な証明は次のように行います。仮定:

\begin{itemize}
  \item 2つのクライアント間に最大の通信遅延δがあるので、あるクライアントが時刻tで何らかのメッセージを聞くと、h五家のすべてのクライアントは時刻t+δまでにそれを聞いたことが保証される。これは、ブロックがネットワークによって受信された間の「時間ウィンドウ」[tmin, tmax] について話すことができ、幅tmax-tminが最大でδであることを意味する。
  \item すべてのクライアントがローカルクロックを完全に同期させていると仮定します(相違点は通信遅延δの一部として扱うことができます)。
  \item ブロックにはtimestampsが必要です。 クライアントが現地時間TLを有する場合、タイムスタンプTBがTB > TL（すなわち、将来）を満たすブロックを拒絶し、最終的に（ただしチェーンの一部として受け入れることができる）ブロックを受け入れることを拒絶するTB < TL - δ（過去にあまりにも遠すぎる）
  \item バリデーターが時刻tにスラッシュ違反を見た場合（それは2回の投票の後に聞こえる時です）、スラッシングのない証拠をまだ含んでいないチェーンの一部であるtimestamps > t +2δのブロックを拒否します。
\end{itemize}


仮に、大量のslashing違反により、2つの矛盾したfinalizeされたチェックポイントc1とc2が発生するとします。

2つの時間ウィンドウが交差しない場合、すべてのバリデーターが最初にチェックポイントに合意し、誰もがルールに従ってfinalizeされたチェックポイントを元に戻さない場合は問題はありません。


図5: ロングレンジ攻撃。一定の間隔でクライアントがjustifyされたチェーンの完全な知識を得る限り、ロングレンジ攻撃の影響を受けません。


2つの時間ウィンドウが交差する場合、次のようにケースを処理できます。c1の時間窓を[0、δ]、c2の時間窓を[δ - ε、2δ - ε]とする。

両方のタイムスタンプは少なくとも0です。時間2δまでに、すべてのクライアントがスラッシュ違反を見たことが保証されているので、証拠取引をまだ含まないチェーンを持つタイムスタンプ>4δのブロックを拒否します。

したがって、ω>4δであれば、悪意のあるバリデータは、クライアントが受け入れるすべてのチェーンにおいて預金を失うことが保証されます。

ここで、ωは「引き出し遅延」（図5）、エンドエポックと検証者間の遅延 彼らの預金を受け取る。


ネットワーク遅延のために、特定のチェーンに "断りのない"証拠が提出されたのか、それとも遅すぎたのかをクライアントが合意しない可能性があります。

しかし、これは安全性の失敗ではなく、ただの生き残りの失敗であり、この可能性は、（証拠の混入を防ぐために必要となる）破損した提案メカニズムが最終性を妨げる可能性があることが既に分かっている。


私たちはまた、攻撃が短期間になると非公式に主張することで、包括的タイムアウトの問題を回避することができます。

なぜなら、バリデーターは証拠をスラッシュして攻撃とみなし、攻撃の一部ではない真正な小数のバリデーターによってサポートされている別のブランチに切り替えることなく(長時間実行しているチェーンを知るため)攻撃を止めて攻撃者を壊すことなく、長期的な連鎖を認識するからです。

\subsection{Castastrophic Crashes}

バリデーターの1/3以上が同時にクラッシュフェイルしたとします。つまり、ネットワークパーティション、コンピュータの障害、またはバリデータ自体が悪意のあるためにネットワークに接続されなくなったとします。

この時点から直感的に言えば、Supermajority linksは作成できないため、将来のチェックポイントをFinalizeすることはできません。


私たちは、チェックポイントに投票しないバリデーターのデポジットをゆっくりと流出させる”inactivity leak”を導入することで、立て直すことができます。

結局のところ、デポジットの規模は、投票しているバリデーターが超大多数であるほど、十分に低くなるまで減少します。


最も単純な式は次のようなものです。”すべての時代のデポジットサイズDのバリデーターは投票に失敗し、D*p(fore 0 < p < 1)を失います”


Catastrophic Crashesをより早く解決するには、Finalizeされていないブロックの長いストリークが発生した場合のリーク率を高める式が最適です。

この流出したetherは、ω日後に焼却か、バリデーターに戻すことができます。

流れ出た資産を焼却するか戻すか、そして”inactivity leak”の正確な公式は、ビザンチンフォールトトレランスではなく、経済的インセンティブの問題であるため、このペーパーの範囲外です。


Inactivity leakは、2つのチェックポイントのうちの1つのみでバリデーターを失うだけで、バリデーターをスラッシングせずに、2つの競合するチェックポイントがFinalizeされる可能性をもたらします(図6)。

バリデーターが2つのサブセットに分割され、サブセットVAがチェーンAに投票し、サブセットVBがチェーンBに投票しているものとします。

チェーンA上では、VBのデポジットはリークし、その逆もあり、各サブセットはそれぞれのチェーン上に大多数を持ち、2つの矛盾するチェックポイントを明示的にスラッシュせずにFinalizeすることができます(ただし、各サブセットはリークによる2つのチェーンの内いずれか1つでそれらの大部分のデポジットを失うことになります)。

このような状況が発生した場合、各バリデーターは、最初に確認した最終チェックポイントを単純に優先する必要があります。


これらの様々な攻撃から回復するための正確なアルゴリズムは、未解決の問題として残っています。今のところ、バリデーターは明らかに不正な行為（証拠を含まないなど）を検出し、手動で“minority soft fork”を作成できると仮定しています。


このマイノリティ フォークは、市場の大多数のチェーンと競合する独自のブロックチェーンと見ることができます。

多数のチェーンが本当に悪意のある攻撃者と結びついて運営されている場合、市場はマイノリティ・フォークを支持すると見なすことができます。



図6：Inactivity leak。 左のチェックポイントはすぐにFinalizeすることができます。

オフラインバリデーターのデポジットが十分に消耗したら、しばらくして右のチェックポイントを確定することができます。
